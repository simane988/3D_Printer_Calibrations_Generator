import math
import typing

from pydantic import BaseModel, validator


class BasePrinterConfig(BaseModel):
    """
    Data Structure of printer configuration and state.
    """

    _position: dict = {"x": 0.0, "y": 0.0, "z": 0.0}  # Dictionary to have current position

    bed_size_x: float  # Table size X in mm (100-1000 mm)
    bed_size_y: float  # Table size Y in mm (100-1000 mm)

    @validator("bed_size_x", "bed_size_y")
    def set_bed_size(cls, bed_size: float) -> float:
        if 100 <= bed_size <= 1000:
            return bed_size
        else:
            raise ValueError("Размер стола не может быть меньше 100 мм или больше 1000 мм.")

    layer_width: float  # Line width of the layer in mm (0.1-2mm)
    first_layer_width: float  # Layer line width in mm (0.1-2mm)

    @validator("layer_width", "first_layer_width")
    def set_layer_width(cls, layer_width: float) -> float:
        if 0.1 <= layer_width <= 2:
            return layer_width
        else:
            raise ValueError("Ширина линии не может быть меньше 0.1 мм или больше 2 мм.")

    layer_height: float

    @validator("layer_height")
    def set_layer_height(cls, layer_height: float, values) -> float:
        if 0.05 <= layer_height <= values["layer_width"] * 0.75:
            return layer_height
        else:
            raise ValueError("Высота слоя (layer_height) не может быть меньше 0.05 мм или больше 75% от ширины линии (layer_width).")

    z_offset: float

    @validator("z_offset")
    def set_z_offset(cls, z_offset: float, values) -> float:
        if abs(z_offset) < values["layer_height"]:
            return z_offset
        else:
            raise ValueError("Модуль z_offset не может быть больше высоты слоя (layer_height).")

    layer_speed: float
    first_layer_speed: float
    travel_speed: float

    @validator("layer_speed", "first_layer_speed", "travel_speed")
    def set_speed(cls, speed: float) -> float:
        if 10 <= speed <= 1000:
            return speed
        else:
            raise ValueError("Скорость принтера не может быть меньше 10 мм/с или больше 1000 мм/с.")

    preheat_hotend: float

    @validator("preheat_hotend")
    def set_preheat_hotend(cls, temp: float) -> float:
        if 150 <= temp <= 350:
            return temp
        else:
            raise ValueError("Температура хотенда (preheat_hotend) не может быть меньше 150°C или больше 350°C.")

    preheat_bed: float

    @validator("preheat_bed")
    def set_preheat_bed(cls, temp: float) -> float:
        if 0 <= temp <= 150:
            return temp
        else:
            raise ValueError("Температура стола (preheat_bed) не может быть меньше 0°C или больше 150°C.")

    fan_speed: float

    @validator("fan_speed")
    def set_fan_speed(cls, speed: float) -> float:
        if 0 <= speed <= 100:
            return speed
        else:
            raise ValueError("Скорость вентилятора (fan_speed) не может быть меньше 0% или больше 100%.")

    is_center_zero: bool
    is_autocalibrate: bool
    linear_advance: str
    file: str


class GCodeProgram:

    def __init__(
            self,
            printer_config: BasePrinterConfig
    ):
        """
        Конструктор класса, который принимает множество параметров.
        Параметры используются для начальной настройки печати.


        """
        self.printer_config = printer_config
        self.file = open(self.printer_config.file, "w", encoding="utf-8")

    def before_start(self):
        """
        Создаёт файл и генерирует G-Code, который будет выполняться перед основной частью.
        Тут происходит прогрев элементов, настройка начальных параметров.
        """
        self.file.write(f"; generated by simane988 calibrations generator\n"
                        f"; Written by Korobeynikov Semen http://github.com/simane988\n"
                        f"{self.printer_config.linear_advance}\n"
                        f"M190 S{self.printer_config.preheat_bed}\n"
                        f"M109 S{self.printer_config.preheat_hotend}\n"
                        f"G28\n"
                        f"G92 E0\n"
                        f"G90\n"
                        f"M82\n"
                        f"M106 S{int(255 / 100 * self.printer_config.fan_speed)}\n"
                        f"; start of gcode\n")

    def after_end(self):
        """
        Выключает нагрев всех элементов, паркует голову и снимает "защиту парковки".
        Также закрывает файл с G-Code-ом.
        """
        self.file.write(f"; end of gcode\n"
                        f"M104 S0\n"
                        f"M140 S0\n"
                        f"M106 S0\n"
                        f"G28\n"
                        f"M84\n")
        self.file.close()

    def set_temp(self,
                 hotend_temp=None,
                 bed_temp=None,
                 is_hotend_wait=False,
                 is_bed_wait=True
                 ):
        """
        Устанавливает новые значения температуры экструдера и стола.

        :param float hotend_temp: Новая температура экструдера
        :param float bed_temp: Новая температура стола
        :param bool is_hotend_wait: Нужно ли ждать нагрева экструдера
        :param bool is_bed_wait: Нужно ли ждать нагрева стола
        """
        if bed_temp:
            if 0 <= bed_temp <= 150:
                if is_bed_wait:
                    self.file.write(f"M190 S{bed_temp}\n")
                else:
                    self.file.write(f"M140 S{bed_temp}\n")
            else:
                raise ValueError("Температура стола (bed_temp) не может быть меньше 0°C и больше 150°C.")

        if hotend_temp:
            if 150 <= hotend_temp <= 350:
                if is_hotend_wait:
                    self.file.write(f"M109 S{hotend_temp}\n")
                else:
                    self.file.write(f"M104 S{hotend_temp}\n")
            else:
                raise ValueError("Температура хотенда (hotend_temp) не может быть меньше 150°C и больше 350°C.")

    def set_fan_speed(self, fan_speed):
        """
        Устанавливает новое значение скорости вентилятора.
        :param float fan_speed: Новая скорость вентилятора
        """
        try:
            if fan_speed < 0 or fan_speed > 100:
                raise ValueError(
                    "Начальная скорость вентилятора (fan_speed) не может быть меньше 0% и больше 100%.")
            self.file.write(f"M106 S{fan_speed}")
        except TypeError:
            raise TypeError(f"fan_speed должен быть типа float, а не {type(fan_speed)}.") from None

    def e(self):
        return (4 * self.printer_config.layer_height * 1 * self.printer_config.layer_width * 1) / (math.pi * 1.75 ** 2)

    # noinspection PyPep8Naming
    def linear_move(self,
                    X=None,
                    Y=None,
                    Z=None,
                    E=False,
                    F=None):
        """

        :param float X: Перемещение по X
        :param float Y: Перемещение по Y
        :param float Z: Перемещение по Z
        :param bool E: Есть ли экструзия
        :param float F: Скорость экструзии
        """

        if E:
            command = "G1"
        else:
            command = "G0"

        if X is not None:
            command += f" X{X}"
        if Y is not None:
            command += f" Y{Y}"
        if Z is not None:
            command += f" Z{Z}"
        if E:
            command += f" E{self.e()}"
        if F is not None:
            command += f" F{F}"

        command += "\n"
        self.file.write(command)


if __name__ == "__main__":
    printer_conf = BasePrinterConfig.parse_raw(open('base_config.json', 'r').read())

    print(printer_conf)
